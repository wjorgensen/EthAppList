import axios from 'axios';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'https://backend-production-29b8.up.railway.app/api';

interface AuthResponse {
  token: string;
}

/**
 * Authenticates a user by sending their wallet address, signature, and message to the backend
 * 
 * @param wallet_address The wallet address
 * @param signature The signature generated by signing the message
 * @param message The message that was signed
 * @returns Promise with the JWT token
 */
export async function authenticateWithWallet(wallet_address: string, signature: string, message: string): Promise<string> {
  try {
    const response = await axios.post<AuthResponse>(`${API_URL}/auth/wallet`, {
      wallet_address,
      signature,
      message
    });
    
    const { token } = response.data;
    
    // Store token in localStorage for persistence
    localStorage.setItem('authToken', token);
    
    // Print token to console as requested
    console.log('JWT Token:', token);
    
    return token;
  } catch (error) {
    console.error('Authentication failed:', error);
    throw error;
  }
}

/**
 * Gets the stored authentication token
 * 
 * @returns The JWT token or null if not authenticated
 */
export function getAuthToken(): string | null {
  if (typeof window !== 'undefined') {
    return localStorage.getItem('authToken');
  }
  return null;
}

/**
 * Checks if the user is authenticated
 * 
 * @returns Boolean indicating if the user is authenticated
 */
export function isAuthenticated(): boolean {
  return !!getAuthToken();
}

/**
 * Logs out the user by removing the auth token
 */
export function logout(): void {
  if (typeof window !== 'undefined') {
    localStorage.removeItem('authToken');
  }
} 